// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Simbir.GO.Domain.Accounts.Enums;
using Simbir.GO.Domain.Rents.Enums;
using Simbir.GO.Domain.Transports.Enums;
using Simbir.GO.Infrastructure.Persistence;

#nullable disable

namespace Simbir.GO.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20231030200731_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Simbir.GO.Application.Services.Common.RefreshToken", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("addedDate");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expiryDate");

                    b.Property<bool>("IsRevoked")
                        .HasColumnType("boolean")
                        .HasColumnName("isRevoked");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("boolean")
                        .HasColumnName("isUsed");

                    b.Property<string>("JwtId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("jwtId");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("token");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("userId");

                    b.HasKey("Id")
                        .HasName("pK_refresh_tokens");

                    b.ToTable("refresh_tokens", (string)null);
                });

            modelBuilder.Entity("Simbir.GO.Domain.Accounts.Account", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("passwordHash");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("passwordSalt");

                    b.Property<Role>("Role")
                        .HasColumnType("role")
                        .HasColumnName("role");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("username");

                    b.HasKey("Id")
                        .HasName("pK_accounts");

                    b.ToTable("accounts", (string)null);
                });

            modelBuilder.Entity("Simbir.GO.Domain.Rents.Rent", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("AccountId")
                        .HasColumnType("bigint")
                        .HasColumnName("accountId");

                    b.Property<double?>("FinalPrice")
                        .HasColumnType("double precision")
                        .HasColumnName("finalPrice");

                    b.Property<double>("PriceOfUnit")
                        .HasColumnType("double precision")
                        .HasColumnName("priceOfUnit");

                    b.Property<PriceType>("PriceType")
                        .HasColumnType("price_type")
                        .HasColumnName("priceType");

                    b.Property<DateTime?>("TimeEnd")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("timeEnd");

                    b.Property<DateTime>("TimeStart")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("timeStart");

                    b.Property<long>("TransportId")
                        .HasColumnType("bigint")
                        .HasColumnName("transportId");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("userId");

                    b.HasKey("Id")
                        .HasName("pK_rents");

                    b.HasIndex("AccountId")
                        .HasDatabaseName("iX_rents_accountId");

                    b.HasIndex("TransportId")
                        .HasDatabaseName("iX_rents_transportId");

                    b.ToTable("rents", (string)null);
                });

            modelBuilder.Entity("Simbir.GO.Domain.Transports.Transport", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool>("CanBeRented")
                        .HasColumnType("boolean")
                        .HasColumnName("canBeRented");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("color");

                    b.Property<double?>("DayPrice")
                        .HasColumnType("double precision")
                        .HasColumnName("dayPrice");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Identifier")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("identifier");

                    b.Property<double?>("MinutePrice")
                        .HasColumnType("double precision")
                        .HasColumnName("minutePrice");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("model");

                    b.Property<long>("OwnerId")
                        .HasColumnType("bigint")
                        .HasColumnName("ownerId");

                    b.Property<TransportType>("TransportType")
                        .HasColumnType("transport_type")
                        .HasColumnName("transportType");

                    b.HasKey("Id")
                        .HasName("pK_transports");

                    b.ToTable("transports", (string)null);
                });

            modelBuilder.Entity("Simbir.GO.Domain.Accounts.Account", b =>
                {
                    b.OwnsOne("Simbir.GO.Domain.Accounts.ValueObjects.Balance", "Balance", b1 =>
                        {
                            b1.Property<long>("AccountId")
                                .HasColumnType("bigint")
                                .HasColumnName("id");

                            b1.Property<double>("Value")
                                .HasColumnType("double precision")
                                .HasColumnName("balance_Value");

                            b1.HasKey("AccountId");

                            b1.ToTable("accounts");

                            b1.WithOwner()
                                .HasForeignKey("AccountId")
                                .HasConstraintName("fK_accounts_accounts_id");
                        });

                    b.Navigation("Balance")
                        .IsRequired();
                });

            modelBuilder.Entity("Simbir.GO.Domain.Rents.Rent", b =>
                {
                    b.HasOne("Simbir.GO.Domain.Accounts.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fK_rents_accounts_AccountTempId");

                    b.HasOne("Simbir.GO.Domain.Transports.Transport", "Transport")
                        .WithMany()
                        .HasForeignKey("TransportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fK_rents_transports_transportTempId");

                    b.Navigation("Account");

                    b.Navigation("Transport");
                });

            modelBuilder.Entity("Simbir.GO.Domain.Transports.Transport", b =>
                {
                    b.OwnsOne("Simbir.GO.Domain.Transports.ValueObjects.Coordinate", "Coordinate", b1 =>
                        {
                            b1.Property<long>("TransportId")
                                .HasColumnType("bigint")
                                .HasColumnName("id");

                            b1.Property<double>("Latitude")
                                .HasColumnType("double precision")
                                .HasColumnName("coordinate_Latitude");

                            b1.Property<double>("Longitude")
                                .HasColumnType("double precision")
                                .HasColumnName("coordinate_Longitude");

                            b1.HasKey("TransportId");

                            b1.ToTable("transports");

                            b1.WithOwner()
                                .HasForeignKey("TransportId")
                                .HasConstraintName("fK_transports_transports_id");
                        });

                    b.Navigation("Coordinate")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
